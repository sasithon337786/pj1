import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:timezone/timezone.dart' as tz; // init ‡∏ó‡∏≥‡πÉ‡∏ô main()
import 'package:permission_handler/permission_handler.dart';
import 'package:pj1/constant/api_endpoint.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin
      _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

  static const AndroidNotificationChannel _channel = AndroidNotificationChannel(
    'reminder_channel',
    'Reminders',
    description: 'Activity reminders with sound',
    importance: Importance.max,
    playSound: true,
    enableVibration: true,
  );

  static Future<void> init() async {
    // ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å WidgetsFlutterBinding / tz.* ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡∏ó‡∏≥‡πÉ‡∏ô main() ‡πÅ‡∏•‡πâ‡∏ß)

    const AndroidInitializationSettings androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const InitializationSettings settings =
        InitializationSettings(android: androidSettings);

    await _flutterLocalNotificationsPlugin.initialize(
      settings,
      onDidReceiveNotificationResponse: (resp) {
        final payload = resp.payload;
        if (payload != null && payload.isNotEmpty) {
          // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å navigatorKey/router ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
          debugPrint("üß≠ openFromNotification: $payload");
        }
      },
    );

    // ‚úÖ Android permissions + channel
    final androidImpl = _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>();

    if (androidImpl != null) {
      await androidImpl.createNotificationChannel(_channel);
      final granted = await androidImpl.requestNotificationsPermission();
      debugPrint("üîî Notification Permission: $granted");
      final exactAlarmGranted = await androidImpl.requestExactAlarmsPermission();
      debugPrint("‚è∞ Exact Alarm Permission: $exactAlarmGranted");
    }

    // ‚úÖ iOS permissions (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cross-platform)
    final iosImpl = _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin>();
    await iosImpl?.requestPermissions(alert: true, badge: true, sound: true);

    // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android ‡πÄ‡∏Å‡πà‡∏≤
    if (await Permission.notification.isDenied) {
      final status = await Permission.notification.request();
      debugPrint("üì± Permission status: $status");
    }

    // ‚úÖ ‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ö‡∏ï
    if (await Permission.ignoreBatteryOptimizations.isDenied) {
      final status = await Permission.ignoreBatteryOptimizations.request();
      debugPrint("üîã Battery Optimization exemption: $status");
    }
  }

  // ‚úÖ ‡∏î‡∏π pending + payload (‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å)
  static Future<void> checkPendingNotifications() async {
    final pending =
        await _flutterLocalNotificationsPlugin.pendingNotificationRequests();
    final now = tz.TZDateTime.now(tz.local);

    debugPrint("üìã Pending notifications: ${pending.length}");
    debugPrint("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${now.day}/${now.month} "
        "${now.hour}:${now.minute.toString().padLeft(2, '0')}");
    debugPrint("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

    for (var n in pending) {
      Map<String, dynamic>? p;
      try {
        if ((n.payload ?? '').isNotEmpty) p = jsonDecode(n.payload!);
      } catch (_) {}
      debugPrint("   üîî ID: ${n.id}");
      debugPrint("      Title: ${n.title}");
      debugPrint("      Body: ${n.body}");
      if (p != null) debugPrint("      Payload: $p");
    }
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API
  static Future<void> scheduleReminders(String idToken) async {
    await _flutterLocalNotificationsPlugin.cancelAll();
    debugPrint("üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß");

    final response = await http.get(
      Uri.parse('${ApiEndpoints.baseUrl}/api/activityDetail/getActData'),
      headers: {'Authorization': 'Bearer $idToken'},
    );

    debugPrint("üì° Response status: ${response.statusCode}");
    debugPrint("üì° Response body: ${response.body}");

    if (response.statusCode != 200) {
      debugPrint("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      return;
    }

    final activities = json.decode(response.body);
    final now = tz.TZDateTime.now(tz.local);
    debugPrint("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $now");

    int notificationCount = 0;

    for (final act in activities) {
      final List<dynamic> timeList = json.decode(act['time_remind']);
      final times = timeList.map((e) => e.toString()).toList();

      final String rounds = act['round']?.toString().toLowerCase() ?? 'day';
      final bool isWeekly = rounds == 'week';

      // ‡∏ó‡∏≥ actId ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ + ‡∏°‡∏µ fallback
      final rawActId = act['act_detail_id']?.toString();
      final parsed = int.tryParse(rawActId ?? '');
      final actId = parsed ?? DateTime.now().millisecondsSinceEpoch % 100000000;

      final String title = act['activity_name']?.toString() ?? '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°';
      final String message = act['message']?.toString() ?? '';

      for (final t in times) {
        final parts = t.split(':');
        final hour = int.parse(parts[0]);
        final minute = int.parse(parts[1]);

        // ‡∏´‡∏≤ occurrence ‡πÅ‡∏£‡∏Å (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
        var first = tz.TZDateTime(
          tz.local,
          now.year,
          now.month,
          now.day,
          hour,
          minute,
        );
        if (first.isBefore(now)) {
          first = first.add(const Duration(days: 1));
        }

        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ ID ‡πÑ‡∏°‡πà‡∏ä‡∏ô
        final notificationId = Object.hash(actId, hour, minute, rounds);

        final payload = jsonEncode({
          "source": "activityDetail",
          "actId": actId,
          "hour": hour,
          "minute": minute,
          "round": rounds,
          "scheduledAt": first.toIso8601String(),
          "title": title,
          "message": message,
        });

        try {
          await _flutterLocalNotificationsPlugin.zonedSchedule(
            notificationId,
            title,
            message,
            first,
            NotificationDetails(
              android: AndroidNotificationDetails(
                _channel.id,
                _channel.name,
                channelDescription: _channel.description,
                importance: Importance.max,
                priority: Priority.high,
                playSound: true,
                enableVibration: true,
                icon: '@mipmap/ic_launcher',
              ),
            ),
            androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          
            // üîÅ ‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ pending ‡πÅ‡∏Ñ‡πà 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤)
            matchDateTimeComponents:
                isWeekly ? DateTimeComponents.dayOfWeekAndTime
                         : DateTimeComponents.time,
            payload: payload,
          );

          notificationCount++;
          debugPrint(
              "‚úÖ [$notificationCount] ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: $title @ $first | id=$notificationId | round=$rounds");
        } catch (e) {
          debugPrint("‚ùå ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e");
        }
      }
    }

    debugPrint("üéØ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î $notificationCount ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
    await checkPendingNotifications();
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  static Future<void> showTestNotification() async {
    await _flutterLocalNotificationsPlugin.show(
      999,
      '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      '‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
      NotificationDetails(
        android: AndroidNotificationDetails(
          _channel.id,
          _channel.name,
          channelDescription: _channel.description,
          importance: Importance.max,
          priority: Priority.high,
          playSound: true,
          enableVibration: true,
        ),
      ),
      payload: jsonEncode({"source": "instant"}),
    );
    debugPrint("üß™ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  static Future<void> scheduleTestNotificationIn10Seconds() async {
    final now = tz.TZDateTime.now(tz.local);
    final scheduleTime = now.add(const Duration(seconds: 45)); // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 45s

    await _flutterLocalNotificationsPlugin.zonedSchedule(
      998,
      '‚è∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
      '‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!',
      scheduleTime,
      NotificationDetails(
        android: AndroidNotificationDetails(
          _channel.id,
          _channel.name,
          channelDescription: _channel.description,
          importance: Importance.max,
          priority: Priority.high,
          playSound: true,
          enableVibration: true,
          icon: '@mipmap/ic_launcher',
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      
      payload: jsonEncode({
        "source": "test",
        "scheduledAt": scheduleTime.toIso8601String(),
      }),
    );

    debugPrint('‚è±Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: '
        '${scheduleTime.hour}:${scheduleTime.minute}:${scheduleTime.second}');
  }
}
